from flask import request, jsonify
from flask import current_app as app
from functools import wraps
import codecs
import pickle
import jwt

## Authentication
def authenticate_by_token(token):
    # Verify token exists
    if token is None:
        return False
    # Verify token is able to be decoded and that it is valid
    try:
        data = jwt.decode(token, app.secret_key)
        return True # returns true if no Expired exception is thrown
    except:
        return False

def login_required(f, message="You are unauthenticated!"):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # Checks whether user is logged in
        token = request.headers.get("AUTH_TOKEN")
        if authenticate_by_token(token):
            return f(*args, **kwargs)
        return jsonify(message=message), 401
    return decorated_function

## Serialization and deserialization 
def serialize(object):
    return codecs.encode(pickle.dumps(object, pickle.HIGHEST_PROTOCOL), "base64").decode()

def deserialize(object_string):
    return pickle.loads(codecs.decode(object_string.encode(), "base64"))

## Sanitize dict keys
def sanitize_dict_keys(obj):
    ''' Filter out any metadata keys which generated by the database i.e. start with underscore'''
    lis_dict = obj.__dict__
    lis_dict = { k: v for k, v in lis_dict.items() if not k.startswith("_") }
    return lis_dict

## Get user
def get_user(request):
    ## Get user
    token = request.headers.get("AUTH_TOKEN")
    data = jwt.decode(token, app.secret_key)
    user_id = data['user']
    return user_id